[{"/home/ubuntu/.ssh/capstone_project/frontend/src/index.js":"1","/home/ubuntu/.ssh/capstone_project/frontend/src/store.js":"2","/home/ubuntu/.ssh/capstone_project/frontend/src/reportWebVitals.js":"3","/home/ubuntu/.ssh/capstone_project/frontend/src/components/home/App.js":"4","/home/ubuntu/.ssh/capstone_project/frontend/src/components/home/RouterWeb.js":"5","/home/ubuntu/.ssh/capstone_project/frontend/src/recoil/silverDataAtom.js":"6","/home/ubuntu/.ssh/capstone_project/frontend/src/components/home/MainHeader.js":"7","/home/ubuntu/.ssh/capstone_project/frontend/src/routes/MyProfile.js":"8","/home/ubuntu/.ssh/capstone_project/frontend/src/routes/Home.js":"9","/home/ubuntu/.ssh/capstone_project/frontend/src/routes/Auth.js":"10","/home/ubuntu/.ssh/capstone_project/frontend/src/routes/FindFacility.js":"11","/home/ubuntu/.ssh/capstone_project/frontend/src/routes/Detail.js":"12","/home/ubuntu/.ssh/capstone_project/frontend/src/components/home/SearchFacility.js":"13","/home/ubuntu/.ssh/capstone_project/frontend/src/components/facility/UserLocFacility.js":"14","/home/ubuntu/.ssh/capstone_project/frontend/src/components/detail/kakaoRoadView.js":"15","/home/ubuntu/.ssh/capstone_project/frontend/src/components/detail/kakaoMap.js":"16","/home/ubuntu/.ssh/capstone_project/frontend/src/components/loading.js":"17"},{"size":807,"mtime":1697684420481,"results":"18","hashOfConfig":"19"},{"size":508,"mtime":1697684420545,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":1697684420517,"results":"21","hashOfConfig":"19"},{"size":1279,"mtime":1699512053959,"results":"22","hashOfConfig":"19"},{"size":4165,"mtime":1697684422277,"results":"23","hashOfConfig":"19"},{"size":120,"mtime":1697684421249,"results":"24","hashOfConfig":"19"},{"size":2153,"mtime":1697684422273,"results":"25","hashOfConfig":"19"},{"size":99,"mtime":1697684421345,"results":"26","hashOfConfig":"19"},{"size":3095,"mtime":1697684421345,"results":"27","hashOfConfig":"19"},{"size":281,"mtime":1697684421265,"results":"28","hashOfConfig":"19"},{"size":8095,"mtime":1697684421301,"results":"29","hashOfConfig":"19"},{"size":2009,"mtime":1697684421301,"results":"30","hashOfConfig":"19"},{"size":5391,"mtime":1697684422333,"results":"31","hashOfConfig":"19"},{"size":4952,"mtime":1697684422209,"results":"32","hashOfConfig":"19"},{"size":401,"mtime":1697684422053,"results":"33","hashOfConfig":"19"},{"size":351,"mtime":1697684422053,"results":"34","hashOfConfig":"19"},{"size":225,"mtime":1697684421149,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9s0q42",{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ubuntu/.ssh/capstone_project/frontend/src/index.js",[],[],"/home/ubuntu/.ssh/capstone_project/frontend/src/store.js",[],[],"/home/ubuntu/.ssh/capstone_project/frontend/src/reportWebVitals.js",[],[],"/home/ubuntu/.ssh/capstone_project/frontend/src/components/home/App.js",["92","93"],[],"/home/ubuntu/.ssh/capstone_project/frontend/src/components/home/RouterWeb.js",["94"],[],"import {useState, useEffect} from \"react\";\nimport {Routes, Route} from \"react-router-dom\";\n\nimport MainHeader from \"./MainHeader.js\"\nimport Home from \"../../routes/Home.js\"\nimport MyProfile from \"../../routes/MyProfile.js\";\nimport Auth from \"../../routes/Auth.js\";\nimport FindFacility from \"../../routes/FindFacility.js\";\nimport Detail from \"../../routes/Detail.js\";\n\nfunction RouterWeb({isLoggedIn}) {\n    const { kakao } = window;\n\tconst [address, setAddress] = useState({}); // 현재 좌표의 주소를 저장할 상태\n\tconst [userLocationOne, setuserLocationOne] = useState();\n\tconst [userLocationTwo, setuserLocationTwo] = useState();\n\tconst [lat, setUserLat] = useState();\n\tconst [lng, setUserLng] = useState();\n    const [userWanstLocation , setuserWanstLocation] = useState(false);\n\n    const [accessToken, setAccessToken] = useState();\n    const consumer__key = '1c08dccc70914d3bbde1';\n    const consumer_secret = '8a0afa457e9a47ca9976';\n\n    const getAccessToken = async() => {\n        try {\n            const response = await fetch(\n                `https://sgisapi.kostat.go.kr/OpenAPI3/auth/authentication.json?consumer_key=${consumer__key}&consumer_secret=${consumer_secret}`\n            );\n            const json = await response.json();\n            setAccessToken(json.result.accessToken);\n        }\n        catch(error){\n            console.log('error' + error);\n        }\n    }\n\n    const getAddress = () => {\n\t\tconst geocoder = new kakao.maps.services.Geocoder(); // 좌표 -> 주소로 변환해주는 객체\n\t\tconst coord = new kakao.maps.LatLng(lat, lng); // 주소로 변환할 좌표 입력\n        const callback = function (result, status) {\n\t\t\tif (status === kakao.maps.services.Status.OK) {\n\t\t\t\tsetAddress(result[0].address);\n\t\t\t}\n\t\t};\n\t\tgeocoder.coord2Address(coord.getLng(), coord.getLat(), callback);\n\t};\n\n\tconst getlocation = () => {\n\t\tif(navigator.geolocation) {\n\t\t\tnavigator.geolocation.getCurrentPosition(function(pos){\n\t\t\t\tsetUserLat(pos.coords.latitude);\n\t\t\t\tsetUserLng(pos.coords.longitude);\n\t\t\t},function(error) {\n\t\t\t\t// 사용자가 위치정보 제공을 거부\n                setuserWanstLocation(true);\n\t\t\t}, {\n\t\t\t\tenableHighAccuracy : false,\n\t\t\t\tmaximumAge : 0,\n\t\t\t\ttimeout : 25000\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tconsole.log(\"GPS 사용 X\");\n\t\t}\n\t}\n\n    useEffect(()=>{\n\t\tgetlocation();\n\t\tif(lat !== undefined && lng !== undefined) {\n\t\t\tgetAddress();\n\t\t}\n\n    },[lat, lng])\n\n\tuseEffect(()=>{\n\t\tif(address !== null) {\n\t\t\tsetuserLocationOne(address.region_1depth_name);\n\t\t\tsetuserLocationTwo(address.region_2depth_name);\n\t\t}\n\t},[address])\n\n    useEffect(()=>{\n        getAccessToken();\n    },[])\n\n\n    return (\n            <div>\n                <MainHeader isLoggedIn={isLoggedIn}/>\n                <Routes>\n                    <>\n                        \n                        <Route path=\"/\" element={<Home />}/>\n                        <Route path=\"/detail/:id\" element={<Detail/>}></Route>\n                        {\n                            // 로그인을 했다면, /myprofile에 접속가능.\n                            isLoggedIn ? (\n                                <>\n                                    <Route path=\"/myprofile\" element={<MyProfile/>}></Route>\n                                </>\n                            )\n                            : (\n                                // 로그인을 안 했다면 /auth에 접속가능.\n                                <>\n                                    <Route path=\"/auth\" element={<Auth/>}></Route>\n                                </>\n                            )\n                        }\n                        \n                        {/* 사용자의 시/도 && 시/군/구에 대한 정보가 있거나 혹은 애초에 위치정보 제공을 거부했을 시 요양시설 찾기에 route를 허용*/}\n                        { (userLocationOne || userWanstLocation) && <Route path=\"/facility\" element={<FindFacility accessToken={accessToken} userLocationOne={userLocationOne} userLocationTwo={userLocationTwo} lat={lat} lng={lng}/>}/> }\n                    </>\n                </Routes>\n            </div>\n    )\n}\n\nexport default RouterWeb;\n","/home/ubuntu/.ssh/capstone_project/frontend/src/recoil/silverDataAtom.js",[],[],"/home/ubuntu/.ssh/capstone_project/frontend/src/components/home/MainHeader.js",[],[],"/home/ubuntu/.ssh/capstone_project/frontend/src/routes/MyProfile.js",[],[],"/home/ubuntu/.ssh/capstone_project/frontend/src/routes/Home.js",["95"],[],"import {React, useEffect, useState, memo} from \"react\";\n\nimport styles from \"../styles/Home.module.css\";\nimport styled from 'styled-components';\n\nimport image1 from \"../backgroundImage/image1.jpg\";\nimport image2 from \"../backgroundImage/image2.jpg\";\nimport image3 from \"../backgroundImage/image3.jpg\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\nimport { faGraduationCap } from \"@fortawesome/free-solid-svg-icons\";\n\n// fade-in으로 img를 생성하기 위해 styled-components를 사용\nconst StyledImg = styled.img`\nanimation: fadein 3s;\n-moz-animation: fadein 3s; /* Firefox */\n-webkit-animation: fadein 3s; /* Safari and Chrome */\n-o-animation: fadein 3s; /* Opera */\n@keyframes fadein {\n    from {\n        opacity: 0;\n    }\n    to {\n        opacity: 1;\n    }\n}\n@-moz-keyframes fadein { /* Firefox */\n    from {\n        opacity: 0;\n    }\n    to {\n        opacity: 1;\n    }\n}\n@-webkit-keyframes fadein { /* Safari and Chrome */\n    from {\n        opacity: 0;\n    }\n    to {\n        opacity: 1;\n    }\n}\n@-o-keyframes fadein { /* Opera */\n    from {\n        opacity: 0;\n    }\n    to {\n        opacity: 1;\n    }\n}\n`\n\nconst Home = () => {\n\n    let imageArr = [image1,image2,image3];\n    const [mainImage, setMainImage] = useState(image1);\n    let [lastRandom, setLastRandom] = useState(0);\n\n    useEffect(()=>{\n        const randomImage = setInterval(()=>{\n            let random = Math.floor(Math.random()*3);\n            // 그 전에 나왔던 사진이 나오지 않도록 함\n            while(random===lastRandom) {\n                random = Math.floor(Math.random()*3);\n            }\n            setMainImage(imageArr[random]);\n            setLastRandom(random);\n        }, 20000)\n        // getAccessToken();\n        return () => clearInterval(randomImage);\n    }, [imageArr])\n\n    return (\n        <div className={styles.home}>\n            <div className ={styles.image__content}>\n                <StyledImg src={mainImage} alt=\"backgroundImage error\"/>\n            </div>\n            <div className={styles.content}>\n                <div className={styles.main__content}>\n                    <div>요양, 걱정마세요.</div>\n                    <div>노후 요양을 책임져 드릴게요.</div>\n                </div>\n                <div/>\n                <div/>\n            </div>\n            <div className={styles.footer}>\n                <div className={styles.copy}>\n                    COPYRIGHT 2023 BY SILVER ALL RIGHT RESERVED\n                </div>\n                <div className={styles.icon}>\n                    <span><a href =\"https://github.com/boomaye36/capstone_project\"><FontAwesomeIcon icon={faGithub}/></a></span>\n                    <span><a href =\"https://www.dankook.ac.kr/web/kor\"><FontAwesomeIcon icon={faGraduationCap}/></a></span>\n                </div>\n            </div>\n        </div>\n    );\n}\n\n// memo로 home을 감싸게 되어, store.js(redux)내에 존재하는 state가 변경되어도 불필요한 재렌더링을 하지 않는다.\nexport default memo(Home);","/home/ubuntu/.ssh/capstone_project/frontend/src/routes/Auth.js",[],[],"/home/ubuntu/.ssh/capstone_project/frontend/src/routes/FindFacility.js",["96","97","98"],[],"import {useState, useEffect, Component} from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport styles from \"../styles/FindFacility.module.css\";\nimport styled from \"styled-components\";\n\nimport UserLocFacility from \"../components/facility/UserLocFacility.js\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMap } from \"@fortawesome/free-solid-svg-icons\";\nimport { faMapLocationDot } from \"@fortawesome/free-solid-svg-icons\";\nimport { faArrowDown } from \"@fortawesome/free-solid-svg-icons\";\n\n//대한민국 전체 시/도에 대한 시/군/구\n// https://sgisapi.kostat.go.kr/OpenAPI3/addr/stage.json?accessToken=343a03e8-2f83-4042-a88e-d8f341fd4c0e& 시/도 => 시/군/구(cd값을 통해서..)\nconst DropDownContent = styled.div`\n    display : none;\n    position : absolute;\n    z-index : 1;\n    font-weight : 400;\n    background-color: #f9f9f9;\n    min-width : 150px;\n    border-bottom : 40px;\n`\nDropDownContent.displayName = DropDownContent;\n\nconst DropDownContainer = styled.div`\n    position : relative;\n\n    &:hover ${DropDownContent} {\n        display : block;\n    }\n`\n\n// 현재 위치 기반으로 먼저 요양병원 시설을 찾아줌.\nfunction FindFacility({accessToken, userLocationOne ,userLocationTwo, lat, lng}) {\n    const navigate = useNavigate();\n    // AcessToken이 4시간마다 변경되므로 사이트에서 계속 가져와야함...\n    const [koreaOne, setKoreaOne] = useState([]);\n    const [koreaTwo, setKoreaTwo] = useState([]);\n    const [getCd, setGetCd] = useState();\n    const [regionOne, setRegionOne] = useState(\"지역\");\n    const [regionTwo, setRegionTwo] = useState(\"시/군/구\");\n\n    const [searchCondition, setSearchCondition] = useState(\"거리순\");\n    const searchConArr = [\"거리순\",\"조회순\",\"별점순\"];\n\n    const url1 = `https://sgisapi.kostat.go.kr/OpenAPI3/addr/stage.json?accessToken=${accessToken}`;\n    const url2 = `https://sgisapi.kostat.go.kr/OpenAPI3/addr/stage.json?accessToken=${accessToken}&cd=${getCd}`;\n\n    // 시/도 그리고 시/도에 대한 값을 가져왔다면 해당 시/군/구에 대한 정보를 가져오게할 API\n    const getKoreaAddress = async() => {\n        let url;\n        if(getCd === undefined) {\n            url = url1;\n        }\n        else url = url2;\n\n        try {\n            const response = await fetch(\n                url\n            )\n            const json = await response.json();\n            console.log(json);\n            if(getCd === undefined) {\n                setKoreaOne(json.result);\n            }\n            else {\n                // KoreaTwo에는 addr_name(ex 안산시 단원구)에서 4번째 index까지만 저장하도록 함.\n                let arr = [];\n                for(var i = 0; i<json.result.length; i++) {\n                    let str = json.result[i].addr_name;\n                    let strSlice = str.slice(0,4);\n                    // 공백 제거 후 arr에 push(공백이 문제를 일으킴.)\n                    arr.push(strSlice.replace(/\\s/g, \"\"));\n                }\n                // 중복 제거 array\n                let uniqueArr = Array.from(new Set(arr));\n                setKoreaTwo(uniqueArr);\n            }\n        }\n        catch(error) {\n            console.log('error' + error);\n        }\n    }\n\n    const onClickValue = (item,number) => {\n        \n        // 시,도 설정\n        if(number === 1) {\n            setGetCd(item.cd);\n            setRegionOne(item.addr_name);\n        }\n        // 시,군,구 설정\n        else if(number === 2) {\n            // 뒤에 구체적인 \"구\"까지 나오는 것에 대해 통일성을 부여하기 위해 4까지 자름.\n            setRegionTwo(item);\n        }\n\n        else if(number === 3) {\n            setSearchCondition(item);\n        }\n\n    }\n\n    const checkUserLocation = () => {\n        if(userLocationOne) {\n            setRegionOne(userLocationOne);\n            // 뒤에 구체적인 \"구\"까지 나오는 것에 대해 통일성을 부여하기 위해 4까지 자름.\n            setRegionTwo(userLocationTwo.slice(0,4));\n        }\n    }\n\n    const checkAccessToken = () => {\n        if(accessToken === undefined) {\n            navigate(\"/\");\n        }\n    }\n    \n\n    useEffect(()=>{\n        // 새로고침시, accessToken에 값이 안 들어옴. 즉 새로고침 누를 시 home으로 사용자가 갔다오게 해야함.\n        checkAccessToken();\n        getKoreaAddress();\n    },[getCd])\n\n    // 기본적으로 사용자의 위치정보 값을 default로 설정.\n    useEffect(()=>{\n        // 새로고침시, accessToken에 값이 안 들어옴. 즉 새로고침 누를 시 home으로 사용자가 갔다오게 해야함.\n        checkAccessToken();\n        checkUserLocation();\n    }, [])\n\n      \n      \n    // 지역 설정 후 해당 지역에 속한 요양 시설을 보여줌.\n    return (\n        <div className ={styles.facility__content}>\n            <div className = {styles.facility__none}/>\n            <div className = {styles.facility__header}>\n                <ul>\n                    <li>\n                        <div className={styles.facility__text}>지역설정</div>\n                    </li>\n                    <li>\n                        <DropDownContainer>\n                            <button><FontAwesomeIcon icon={faMap}/> { regionOne}</button>\n                            <DropDownContent>\n                                {\n                                    koreaOne.map((item, index)=>{\n                                        return (\n                                            <>\n                                                <div onClick={()=>onClickValue(item,1)} key={index}>{item.addr_name}</div>\n                                            </>\n                                        )\n                                    })    \n                                }\n                            </DropDownContent>\n                        </DropDownContainer>\n                    </li>\n                    <li>\n                        <DropDownContainer>\n                        <button><FontAwesomeIcon icon={faMapLocationDot}/> { regionTwo}</button>\n                        <DropDownContent>\n                                {\n                                    koreaTwo && koreaTwo.map((item, index)=>{\n                                        return (\n                                            <div>\n                                                <div onClick={()=>onClickValue(item,2)} key={index}>{item}</div>\n                                            </div>\n                                        )\n                                    })    \n                                }\n                            </DropDownContent>\n                        </DropDownContainer>\n                    </li>\n                    <li className={styles.facility__searchConli}>\n                        <DropDownContainer>\n                        {/* 기본 값이 거리순으로 되어있도록 함. */}\n                        <div className={styles.facility__searchCon}>{searchCondition } <FontAwesomeIcon icon={faArrowDown}/></div>\n                            <DropDownContent>\n                            {\n                                searchConArr.map((item,index)=>{\n                                    return (\n                                        <div>\n                                            <div onClick={()=>onClickValue(item,3)} key={index}>{item}</div>\n                                        </div>\n                                    )\n                                })\n                            }\n                            </DropDownContent>\n                        </DropDownContainer>\n                    </li>\n                </ul>\n            </div>\n\n            <div className={styles.facility__searchResult}>\n                {\n                    <UserLocFacility regionOne={regionOne} regionTwo={regionTwo} userLocationTwo={userLocationTwo} lat={lat} lng={lng}/>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default FindFacility;","/home/ubuntu/.ssh/capstone_project/frontend/src/routes/Detail.js",[],[],"/home/ubuntu/.ssh/capstone_project/frontend/src/components/home/SearchFacility.js",["99","100","101","102"],[],"// modal\n\nimport axios from \"axios\";\n\nimport { Link } from \"react-router-dom\";\n\nimport {useEffect, useState} from \"react\";\nimport Modal from 'react-bootstrap/Modal';\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { changeState } from \"../../store.js\"; \n\nimport styles from \"../../styles/SearchFacility.module.css\";\n\n// 이게 있어야 modal로 뜸\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../../styles/Paging.css';\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMagnifyingGlass } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { silverDataAtom } from \"../../recoil/silverDataAtom.js\";\nimport { useRecoilState } from \"recoil\";\nimport Pagination from \"react-js-pagination\";\n\n\nfunction FindFacility() {\n    const limit = 3;\n    const [search, setSearch] = useState(\"\");\n    const [page, setPage] = useState(1);\n    const offset = (page - 1) * limit;\n\n    const [silverData, serSilverData] = useRecoilState(silverDataAtom);\n\n    const searched = silverData.filter((item)=>\n        item.name.includes(search)\n    );\n\n    const onChange = (event) => {\n        setSearch(event.target.value); // 입력값을 전부 소문자로 생각\n        setPage(1);\n    }\n\n    let dispatch = useDispatch();\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n    }\n\n    const handleClose = (e) => {\n        dispatch(changeState());\n    }\n\n    const handlePageChange = (page) => {\n        setPage(page);\n    };\n\n    let showModal= useSelector((state)=> {return state.showModal.isOpen});\n\n    return (\n        <>\n        <Modal\n            show={showModal} \n            onHide={handleClose}\n            // modal size조절\n            size=\"lg\"\n            className={styles.modal}\n        >\n            \n                <Modal.Header closeButton>\n                <Modal.Title id=\"example-custom-modal-styling-title\">\n                    시설검색\n                </Modal.Title>\n                </Modal.Header>\n                <Modal.Body className={styles.modal__body}>\n                <form onSubmit={onSubmit}>\n                    <div className={styles.search__box}>\n                        <input\n                            className={styles.search__input} \n                            type=\"text\" \n                            value={search}\n                            onChange={onChange}\n                            placeholder=\"시설이름을 입력하세요...\"\n                        />\n                        <button className=\"search-btn\" type=\"submit\">\n                            <FontAwesomeIcon icon={faMagnifyingGlass}/>\n                        </button>\n                    </div>\n                </form>\n                </Modal.Body>\n                <div className = {styles.search__content}>\n                    <div className = {styles.search__result}>\n                        {\n                            // search라는 state에 무언가 입력되지 않으면 아무것도 보이지 않음. 무언가 입력이 되었다면 그때 병원을 찾아서 사용자에게 보여줌.\n                            search ? (\n                            // 해당 결과가 여러개일 경우, 상단에 존재하는 3개의 결과물만 보여주도록 함.\n                            searched.slice(offset, offset + limit).map((item, index)=>{\n                                if(index < 3) {\n                                    return (\n                                        <>\n                                            <ul>\n                                                <li>\n                                                    시설 이름 : {item.name}\n                                                    <br/>\n                                                    주소 : {item.location}\n                                                    <br/>\n                                                    전화번호 : {item.phonenumber}\n                                                    <br/>\n                                                    진료과목 : {item.category}\n                                                    <br/>\n                                                    <Link to={`/detail/${item.id}`}\n                                                    state={{item : item}}>자세히보기...</Link>\n                                                </li>\n                                            </ul>\n                                        </>\n                                    )\n                                }\n                            })\n                            ) :\n                            null\n                        }\n                    </div>\n                    {\n                        search && <div className = {styles.search__footer}>\n                            <Pagination\n                                activePage={page}\n                                itemsCountPerPage={3}\n                                totalItemsCount={searched.length}\n                                pageRangeDisplayed={5}\n                                prevPageText={\"‹\"}\n                                nextPageText={\"›\"}\n                                onChange={handlePageChange}\n                            />\n                        </div>\n                    }\n                </div>\n\n            \n        </Modal>\n        </>\n    );\n}\n\nexport default FindFacility;","/home/ubuntu/.ssh/capstone_project/frontend/src/components/facility/UserLocFacility.js",["103","104","105","106","107","108","109"],[],"import {useEffect, useState} from \"react\";\nimport styles from \"../../styles/UserLocFacility.module.css\"\nimport { Link } from \"react-router-dom\";\nimport Loading from \"../loading\";\n\nimport { silverDataAtom } from \"../../recoil/silverDataAtom.js\";\nimport { useRecoilState } from \"recoil\";\nimport '../../styles/Paging.css';\nimport Pagination from \"react-js-pagination\";\n\nfunction UserLocFacility({regionOne, regionTwo, userLocationTwo, lat, lng}) {\n    const limit = 5;\n    const [page, setPage] = useState(1);\n    const offset = (page - 1) * limit;\n\n    const [newHospitals, setNewHospitals] = useState([]);\n    const [searchLoc, setSearchLoc] = useState({});\n    const [loading, setLoading] = useState(true);\n\n    const [silverData, serSilverData] = useRecoilState(silverDataAtom);\n    \n\n    // hospitals에 값이 입력되었을 때마다 실행\n    useEffect(()=> {\n        const newHos = silverData.map((item) => {\n            return {\n             ...item,\n             distance: getDistance(lat, lng, item.ypos, item.xpos),\n           };\n         });\n    \n           // 사용자 기준 거리순으로 정렬 후 state에 저장\n            newHos.sort(compareByDistance);\n            setNewHospitals(newHos);\n            setLoading(false);\n            console.log(silverData);\n    },[])\n\n\n    // 위도 경도에 대해 2가지 장소가 정해졌을때, 직선거리를 구하는 함수\n    function getDistance(lat1, lon1, lat2, lon2) {\n        if ((lat1 == lat2) && (lon1 == lon2))\n            return 0;\n    \n        var radLat1 = Math.PI * lat1 / 180;\n        var radLat2 = Math.PI * lat2 / 180;\n        var theta = lon1 - lon2;\n        var radTheta = Math.PI * theta / 180;\n        var dist = Math.sin(radLat1) * Math.sin(radLat2) + Math.cos(radLat1) * Math.cos(radLat2) * Math.cos(radTheta);\n        if (dist > 1)\n            dist = 1;\n    \n        dist = Math.acos(dist);\n        dist = dist * 180 / Math.PI;\n        dist = dist * 60 * 1.1515 * 1.609344 * 1000;\n        if (dist < 100) dist = Math.round(dist / 10) * 10;\n        else dist = Math.round(dist / 100) * 100;\n    \n        return dist;\n    }\n\n    // distance 거리 순으로 오름차순\n    const compareByDistance = (a,b) => \n        a.distance - b.distance;\n\n    // 만약 userLocationTwo에 값이 있다면 우선적으로 보여줘야함.\n    const searchedLoc = newHospitals.filter((res)=>\n        res.location.includes(regionTwo)\n    );\n\n    const handlePageChange = (page) => {\n        setPage(page);\n    };\n    \n    return (\n        <div className={styles.userLoc__container}>\n            {\n                loading ? ( <div className={styles.userLoc__loading}><Loading/></div> )\n                : (\n                    // 해당 결과가 여러개일 경우, 상단에 존재하는 5개의 결과물만 보여주도록 함.\n                    searchedLoc.slice(offset, offset + limit).map((item, index)=>{\n                        if(index < 5) {\n                            return (\n                                <>\n                                    <div className={styles.userLoc__content}>\n                                    <div className={styles.userLoc__number}>{index+1}</div>\n                                        <ul>\n                                            <li>\n                                                시설 이름 : {item.name}\n                                                <br/>\n                                                주소 : {item.location}\n                                                <br/>\n                                                전화번호 : {item.phonenumber}\n                                                <br/>\n                                                진료 과목 : {item.category}\n                                                <br/>\n                                                {/* postNo라는 id 개념의 속성을 통해 detail page를 만듬. */}\n                                                <Link to={`/detail/${item.id}`}\n                                                state={{item : item}}>자세히보기...</Link>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                </>\n                            )\n                        }\n                    })\n                )\n            }\n            {\n                searchedLoc && <div className = {styles.userLoc__footer}>\n                   <Pagination\n                        activePage={page}\n                        itemsCountPerPage={3}\n                        totalItemsCount={searchedLoc.length}\n                        pageRangeDisplayed={5}\n                        prevPageText={\"‹\"}\n                        nextPageText={\"›\"}\n                        onChange={handlePageChange}\n                    />\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default UserLocFacility;","/home/ubuntu/.ssh/capstone_project/frontend/src/components/detail/kakaoRoadView.js",[],[],"/home/ubuntu/.ssh/capstone_project/frontend/src/components/detail/kakaoMap.js",[],[],"/home/ubuntu/.ssh/capstone_project/frontend/src/components/loading.js",[],[],{"ruleId":"110","severity":1,"message":"111","line":7,"column":10,"nodeType":"112","messageId":"113","endLine":7,"endColumn":24},{"ruleId":"114","severity":1,"message":"115","line":22,"column":7,"nodeType":"116","endLine":22,"endColumn":9,"suggestions":"117"},{"ruleId":"114","severity":1,"message":"118","line":73,"column":7,"nodeType":"116","endLine":73,"endColumn":17,"suggestions":"119"},{"ruleId":"114","severity":1,"message":"120","line":72,"column":8,"nodeType":"116","endLine":72,"endColumn":18,"suggestions":"121"},{"ruleId":"110","severity":1,"message":"122","line":1,"column":30,"nodeType":"112","messageId":"113","endLine":1,"endColumn":39},{"ruleId":"114","severity":1,"message":"123","line":124,"column":7,"nodeType":"116","endLine":124,"endColumn":14,"suggestions":"124"},{"ruleId":"114","severity":1,"message":"125","line":131,"column":8,"nodeType":"116","endLine":131,"endColumn":10,"suggestions":"126"},{"ruleId":"110","severity":1,"message":"127","line":3,"column":8,"nodeType":"112","messageId":"113","endLine":3,"endColumn":13},{"ruleId":"110","severity":1,"message":"128","line":7,"column":9,"nodeType":"112","messageId":"113","endLine":7,"endColumn":18},{"ruleId":"110","severity":1,"message":"129","line":33,"column":24,"nodeType":"112","messageId":"113","endLine":33,"endColumn":37},{"ruleId":"130","severity":1,"message":"131","line":97,"column":85,"nodeType":"132","messageId":"133","endLine":97,"endColumn":87},{"ruleId":"110","severity":1,"message":"134","line":17,"column":12,"nodeType":"112","messageId":"113","endLine":17,"endColumn":21},{"ruleId":"110","severity":1,"message":"135","line":17,"column":23,"nodeType":"112","messageId":"113","endLine":17,"endColumn":35},{"ruleId":"110","severity":1,"message":"129","line":20,"column":24,"nodeType":"112","messageId":"113","endLine":20,"endColumn":37},{"ruleId":"114","severity":1,"message":"136","line":37,"column":7,"nodeType":"116","endLine":37,"endColumn":9,"suggestions":"137"},{"ruleId":"138","severity":1,"message":"139","line":42,"column":19,"nodeType":"140","messageId":"141","endLine":42,"endColumn":21},{"ruleId":"138","severity":1,"message":"139","line":42,"column":37,"nodeType":"140","messageId":"141","endLine":42,"endColumn":39},{"ruleId":"130","severity":1,"message":"131","line":81,"column":80,"nodeType":"132","messageId":"133","endLine":81,"endColumn":82},"no-unused-vars","'useRecoilState' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setSilverData'. Either include it or remove the dependency array.","ArrayExpression",["142"],"React Hook useEffect has a missing dependency: 'getAddress'. Either include it or remove the dependency array.",["143"],"React Hook useEffect has a missing dependency: 'lastRandom'. Either include it or remove the dependency array.",["144"],"'Component' is defined but never used.","React Hook useEffect has missing dependencies: 'checkAccessToken' and 'getKoreaAddress'. Either include them or remove the dependency array.",["145"],"React Hook useEffect has missing dependencies: 'checkAccessToken' and 'checkUserLocation'. Either include them or remove the dependency array.",["146"],"'axios' is defined but never used.","'useEffect' is defined but never used.","'serSilverData' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'searchLoc' is assigned a value but never used.","'setSearchLoc' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'lat', 'lng', and 'silverData'. Either include them or remove the dependency array.",["147"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},"Update the dependencies array to be: [setSilverData]",{"range":"160","text":"161"},"Update the dependencies array to be: [getAddress, lat, lng]",{"range":"162","text":"163"},"Update the dependencies array to be: [imageArr, lastRandom]",{"range":"164","text":"165"},"Update the dependencies array to be: [checkAccessToken, getCd, getKoreaAddress]",{"range":"166","text":"167"},"Update the dependencies array to be: [checkAccessToken, checkUserLocation]",{"range":"168","text":"169"},"Update the dependencies array to be: [lat, lng, silverData]",{"range":"170","text":"171"},[774,776],"[setSilverData]",[2302,2312],"[getAddress, lat, lng]",[1801,1811],"[imageArr, lastRandom]",[3935,3942],"[checkAccessToken, getCd, getKoreaAddress]",[4143,4145],"[checkAccessToken, checkUserLocation]",[1231,1233],"[lat, lng, silverData]"]