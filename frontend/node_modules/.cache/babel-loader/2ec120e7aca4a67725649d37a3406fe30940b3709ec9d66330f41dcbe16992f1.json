{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\capstone\\\\frontend\\\\src\\\\components\\\\home\\\\RouterWeb.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport MainHeader from \"./MainHeader.js\";\nimport Home from \"../../routes/Home.js\";\nimport MyProfile from \"../../routes/MyProfile.js\";\nimport Auth from \"../../routes/Auth.js\";\nimport FindFacility from \"../../routes/FindFacility.js\";\nimport Detail from \"../../routes/Detail.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction RouterWeb(_ref) {\n  _s();\n  let {\n    isLoggedIn\n  } = _ref;\n  const {\n    kakao\n  } = window;\n  const [address, setAddress] = useState({}); // 현재 좌표의 주소를 저장할 상태\n  const [userLocationOne, setuserLocationOne] = useState();\n  const [userLocationTwo, setuserLocationTwo] = useState();\n  const [lat, setUserLat] = useState();\n  const [lng, setUserLng] = useState();\n  const [userWanstLocation, setuserWanstLocation] = useState(false);\n  const [accessToken, setAccessToken] = useState();\n  const consumer__key = '1c08dccc70914d3bbde1';\n  const consumer_secret = '8a0afa457e9a47ca9976';\n  const getAccessToken = async () => {\n    try {\n      const response = await fetch(`https://sgisapi.kostat.go.kr/OpenAPI3/auth/authentication.json?consumer_key=${consumer__key}&consumer_secret=${consumer_secret}`);\n      const json = await response.json();\n      setAccessToken(json.result.accessToken);\n    } catch (error) {\n      console.log('error' + error);\n    }\n  };\n  const getAddress = () => {\n    const geocoder = new kakao.maps.services.Geocoder(); // 좌표 -> 주소로 변환해주는 객체\n    const coord = new kakao.maps.LatLng(lat, lng); // 주소로 변환할 좌표 입력\n    const callback = function (result, status) {\n      if (status === kakao.maps.services.Status.OK) {\n        setAddress(result[0].address);\n      }\n    };\n    geocoder.coord2Address(coord.getLng(), coord.getLat(), callback);\n  };\n  const getlocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(function (pos) {\n        setUserLat(pos.coords.latitude);\n        setUserLng(pos.coords.longitude);\n      }, function (error) {\n        // 사용자가 위치정보 제공을 거부\n        setuserWanstLocation(true);\n      }, {\n        enableHighAccuracy: false,\n        maximumAge: 0,\n        timeout: 25000\n      });\n    } else {\n      console.log(\"GPS 사용 X\");\n    }\n  };\n  useEffect(() => {\n    getlocation();\n    if (lat !== undefined && lng !== undefined) {\n      getAddress();\n    }\n  }, [lat, lng]);\n  useEffect(() => {\n    if (address !== null) {\n      setuserLocationOne(address.region_1depth_name);\n      setuserLocationTwo(address.region_2depth_name);\n    }\n  }, [address]);\n  useEffect(() => {\n    getAccessToken();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MainHeader, {\n      isLoggedIn: isLoggedIn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Routes, {\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 50\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/bestDetail1\",\n          element: /*#__PURE__*/_jsxDEV(Detail, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 61\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this),\n        // 로그인을 했다면, /myprofile에 접속가능.\n        isLoggedIn ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/myprofile\",\n            element: /*#__PURE__*/_jsxDEV(MyProfile, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 71\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 37\n          }, this)\n        }, void 0, false) :\n        /*#__PURE__*/\n        // 로그인을 안 했다면 /auth에 접속가능.\n        _jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/auth\",\n            element: /*#__PURE__*/_jsxDEV(Auth, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 66\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 37\n          }, this)\n        }, void 0, false), (userLocationOne || userWanstLocation) && /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/facility\",\n          element: /*#__PURE__*/_jsxDEV(FindFacility, {\n            accessToken: accessToken,\n            userLocationOne: userLocationOne,\n            userLocationTwo: userLocationTwo,\n            lat: lat,\n            lng: lng\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 102\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 69\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 13\n  }, this);\n}\n_s(RouterWeb, \"OifubskvomihokaSZoLT4t3n0jQ=\");\n_c = RouterWeb;\nexport default RouterWeb;\nvar _c;\n$RefreshReg$(_c, \"RouterWeb\");","map":{"version":3,"names":["useState","useEffect","Routes","Route","MainHeader","Home","MyProfile","Auth","FindFacility","Detail","jsxDEV","_jsxDEV","Fragment","_Fragment","RouterWeb","_ref","_s","isLoggedIn","kakao","window","address","setAddress","userLocationOne","setuserLocationOne","userLocationTwo","setuserLocationTwo","lat","setUserLat","lng","setUserLng","userWanstLocation","setuserWanstLocation","accessToken","setAccessToken","consumer__key","consumer_secret","getAccessToken","response","fetch","json","result","error","console","log","getAddress","geocoder","maps","services","Geocoder","coord","LatLng","callback","status","Status","OK","coord2Address","getLng","getLat","getlocation","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","enableHighAccuracy","maximumAge","timeout","undefined","region_1depth_name","region_2depth_name","children","fileName","_jsxFileName","lineNumber","columnNumber","path","element","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/capstone/frontend/src/components/home/RouterWeb.js"],"sourcesContent":["import {useState, useEffect} from \"react\";\nimport {Routes, Route} from \"react-router-dom\";\n\nimport MainHeader from \"./MainHeader.js\"\nimport Home from \"../../routes/Home.js\"\nimport MyProfile from \"../../routes/MyProfile.js\";\nimport Auth from \"../../routes/Auth.js\";\nimport FindFacility from \"../../routes/FindFacility.js\";\nimport Detail from \"../../routes/Detail.js\";\n\nfunction RouterWeb({isLoggedIn}) {\n    const { kakao } = window;\n\tconst [address, setAddress] = useState({}); // 현재 좌표의 주소를 저장할 상태\n\tconst [userLocationOne, setuserLocationOne] = useState();\n\tconst [userLocationTwo, setuserLocationTwo] = useState();\n\tconst [lat, setUserLat] = useState();\n\tconst [lng, setUserLng] = useState();\n    const [userWanstLocation , setuserWanstLocation] = useState(false);\n\n    const [accessToken, setAccessToken] = useState();\n    const consumer__key = '1c08dccc70914d3bbde1';\n    const consumer_secret = '8a0afa457e9a47ca9976';\n\n    const getAccessToken = async() => {\n        try {\n            const response = await fetch(\n                `https://sgisapi.kostat.go.kr/OpenAPI3/auth/authentication.json?consumer_key=${consumer__key}&consumer_secret=${consumer_secret}`\n            );\n            const json = await response.json();\n            setAccessToken(json.result.accessToken);\n        }\n        catch(error){\n            console.log('error' + error);\n        }\n    }\n\n    const getAddress = () => {\n\t\tconst geocoder = new kakao.maps.services.Geocoder(); // 좌표 -> 주소로 변환해주는 객체\n\t\tconst coord = new kakao.maps.LatLng(lat, lng); // 주소로 변환할 좌표 입력\n        const callback = function (result, status) {\n\t\t\tif (status === kakao.maps.services.Status.OK) {\n\t\t\t\tsetAddress(result[0].address);\n\t\t\t}\n\t\t};\n\t\tgeocoder.coord2Address(coord.getLng(), coord.getLat(), callback);\n\t};\n\n\tconst getlocation = () => {\n\t\tif(navigator.geolocation) {\n\t\t\tnavigator.geolocation.getCurrentPosition(function(pos){\n\t\t\t\tsetUserLat(pos.coords.latitude);\n\t\t\t\tsetUserLng(pos.coords.longitude);\n\t\t\t},function(error) {\n\t\t\t\t// 사용자가 위치정보 제공을 거부\n                setuserWanstLocation(true);\n\t\t\t}, {\n\t\t\t\tenableHighAccuracy : false,\n\t\t\t\tmaximumAge : 0,\n\t\t\t\ttimeout : 25000\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tconsole.log(\"GPS 사용 X\");\n\t\t}\n\t}\n\n    useEffect(()=>{\n\t\tgetlocation();\n\t\tif(lat !== undefined && lng !== undefined) {\n\t\t\tgetAddress();\n\t\t}\n\n    },[lat, lng])\n\n\tuseEffect(()=>{\n\t\tif(address !== null) {\n\t\t\tsetuserLocationOne(address.region_1depth_name);\n\t\t\tsetuserLocationTwo(address.region_2depth_name);\n\t\t}\n\t},[address])\n\n    useEffect(()=>{\n        getAccessToken();\n    },[])\n\n\n    return (\n            <div>\n                <MainHeader isLoggedIn={isLoggedIn}/>\n                <Routes>\n                    <>\n                        \n                        <Route path=\"/\" element={<Home />}/>\n                        <Route path=\"/bestDetail1\" element={<Detail/>}></Route>\n                        {\n                            // 로그인을 했다면, /myprofile에 접속가능.\n                            isLoggedIn ? (\n                                <>\n                                    <Route path=\"/myprofile\" element={<MyProfile/>}></Route>\n                                </>\n                            )\n                            : (\n                                // 로그인을 안 했다면 /auth에 접속가능.\n                                <>\n                                    <Route path=\"/auth\" element={<Auth/>}></Route>\n                                </>\n                            )\n                        }\n                        \n                        {/* 사용자의 시/도 && 시/군/구에 대한 정보가 있거나 혹은 애초에 위치정보 제공을 거부했을 시 요양시설 찾기에 route를 허용*/}\n                        { (userLocationOne || userWanstLocation) && <Route path=\"/facility\" element={<FindFacility accessToken={accessToken} userLocationOne={userLocationOne} userLocationTwo={userLocationTwo} lat={lat} lng={lng}/>}/> }\n                    </>\n                </Routes>\n            </div>\n    )\n}\n\nexport default RouterWeb;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}