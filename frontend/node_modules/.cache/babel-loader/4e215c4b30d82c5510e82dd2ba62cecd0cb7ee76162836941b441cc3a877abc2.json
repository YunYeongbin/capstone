{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\capstone\\\\frontend\\\\src\\\\components\\\\facility\\\\UserLocFacility.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport styles from \"../../styles/UserLocFacility.module.css\";\nimport { Link } from \"react-router-dom\";\nimport Loading from \"../loading\";\nimport { silverDataAtom } from \"../../recoil/silverDataAtom.js\";\nimport { useRecoilState } from \"recoil\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction UserLocFacility(_ref) {\n  _s();\n  let {\n    regionOne,\n    regionTwo,\n    userLocationTwo,\n    lat,\n    lng\n  } = _ref;\n  const [newHospitals, setNewHospitals] = useState([]);\n  const [searchLoc, setSearchLoc] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [silverData, serSilverData] = useRecoilState(silverDataAtom);\n\n  // hospitals에 값이 입력되었을 때마다 실행\n  useEffect(() => {\n    const newHos = silverData.map(item => {\n      return {\n        ...item,\n        distance: getDistance(lat, lng, item.ypos, item.xpos)\n      };\n    });\n\n    // 사용자 기준 거리순으로 정렬 후 state에 저장\n    newHos.sort(compareByDistance);\n    setNewHospitals(newHos);\n    setLoading(false);\n    console.log(silverData);\n  }, []);\n\n  // 위도 경도에 대해 2가지 장소가 정해졌을때, 직선거리를 구하는 함수\n  function getDistance(lat1, lon1, lat2, lon2) {\n    if (lat1 == lat2 && lon1 == lon2) return 0;\n    var radLat1 = Math.PI * lat1 / 180;\n    var radLat2 = Math.PI * lat2 / 180;\n    var theta = lon1 - lon2;\n    var radTheta = Math.PI * theta / 180;\n    var dist = Math.sin(radLat1) * Math.sin(radLat2) + Math.cos(radLat1) * Math.cos(radLat2) * Math.cos(radTheta);\n    if (dist > 1) dist = 1;\n    dist = Math.acos(dist);\n    dist = dist * 180 / Math.PI;\n    dist = dist * 60 * 1.1515 * 1.609344 * 1000;\n    if (dist < 100) dist = Math.round(dist / 10) * 10;else dist = Math.round(dist / 100) * 100;\n    return dist;\n  }\n\n  // distance 거리 순으로 오름차순\n  const compareByDistance = (a, b) => a.distance - b.distance;\n\n  // 만약 userLocationTwo에 값이 있다면 우선적으로 보여줘야함.\n  const searchedLoc = newHospitals.filter(res => res.location.includes(regionTwo));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.userLoc__container,\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.userLoc__loading,\n      children: /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 70\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 29\n    }, this) :\n    // 해당 결과가 여러개일 경우, 상단에 존재하는 5개의 결과물만 보여주도록 함.\n    searchedLoc.map((item, index) => {\n      if (index < 5) {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.userLoc__content,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.userLoc__number,\n              children: index + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"\\uC2DC\\uC124 \\uC774\\uB984 : \", item.name, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 80,\n                  columnNumber: 49\n                }, this), \"\\uC8FC\\uC18C : \", item.location, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 82,\n                  columnNumber: 49\n                }, this), \"\\uC804\\uD654\\uBC88\\uD638 : \", item.phonenumber, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 49\n                }, this), \"\\uC9C4\\uB8CC \\uACFC\\uBAA9 : \", item.category, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(Link, {\n                  to: `/detail/${item.id}`,\n                  state: {\n                    item: item\n                  },\n                  children: \"\\uC790\\uC138\\uD788\\uBCF4\\uAE30...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 88,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 37\n          }, this)\n        }, void 0, false);\n      }\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n}\n_s(UserLocFacility, \"gHAlwKE2iAya8tqYxnKnrRfFoD4=\", false, function () {\n  return [useRecoilState];\n});\n_c = UserLocFacility;\nexport default UserLocFacility;\nvar _c;\n$RefreshReg$(_c, \"UserLocFacility\");","map":{"version":3,"names":["useEffect","useState","styles","Link","Loading","silverDataAtom","useRecoilState","jsxDEV","_jsxDEV","Fragment","_Fragment","UserLocFacility","_ref","_s","regionOne","regionTwo","userLocationTwo","lat","lng","newHospitals","setNewHospitals","searchLoc","setSearchLoc","loading","setLoading","silverData","serSilverData","newHos","map","item","distance","getDistance","ypos","xpos","sort","compareByDistance","console","log","lat1","lon1","lat2","lon2","radLat1","Math","PI","radLat2","theta","radTheta","dist","sin","cos","acos","round","a","b","searchedLoc","filter","res","location","includes","className","userLoc__container","children","userLoc__loading","fileName","_jsxFileName","lineNumber","columnNumber","index","userLoc__content","userLoc__number","name","phonenumber","category","to","id","state","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/capstone/frontend/src/components/facility/UserLocFacility.js"],"sourcesContent":["import {useEffect, useState} from \"react\";\nimport styles from \"../../styles/UserLocFacility.module.css\"\nimport { Link } from \"react-router-dom\";\nimport Loading from \"../loading\";\n\nimport { silverDataAtom } from \"../../recoil/silverDataAtom.js\";\nimport { useRecoilState } from \"recoil\";\n\nfunction UserLocFacility({regionOne, regionTwo, userLocationTwo, lat, lng}) {\n    const [newHospitals, setNewHospitals] = useState([]);\n    const [searchLoc, setSearchLoc] = useState({});\n    const [loading, setLoading] = useState(true);\n\n    const [silverData, serSilverData] = useRecoilState(silverDataAtom);\n    \n\n    // hospitals에 값이 입력되었을 때마다 실행\n    useEffect(()=> {\n        const newHos = silverData.map((item) => {\n            return {\n             ...item,\n             distance: getDistance(lat, lng, item.ypos, item.xpos),\n           };\n         });\n    \n           // 사용자 기준 거리순으로 정렬 후 state에 저장\n            newHos.sort(compareByDistance);\n            setNewHospitals(newHos);\n            setLoading(false);\n            console.log(silverData);\n    },[])\n\n\n    // 위도 경도에 대해 2가지 장소가 정해졌을때, 직선거리를 구하는 함수\n    function getDistance(lat1, lon1, lat2, lon2) {\n        if ((lat1 == lat2) && (lon1 == lon2))\n            return 0;\n    \n        var radLat1 = Math.PI * lat1 / 180;\n        var radLat2 = Math.PI * lat2 / 180;\n        var theta = lon1 - lon2;\n        var radTheta = Math.PI * theta / 180;\n        var dist = Math.sin(radLat1) * Math.sin(radLat2) + Math.cos(radLat1) * Math.cos(radLat2) * Math.cos(radTheta);\n        if (dist > 1)\n            dist = 1;\n    \n        dist = Math.acos(dist);\n        dist = dist * 180 / Math.PI;\n        dist = dist * 60 * 1.1515 * 1.609344 * 1000;\n        if (dist < 100) dist = Math.round(dist / 10) * 10;\n        else dist = Math.round(dist / 100) * 100;\n    \n        return dist;\n    }\n\n    // distance 거리 순으로 오름차순\n    const compareByDistance = (a,b) => \n        a.distance - b.distance;\n\n    // 만약 userLocationTwo에 값이 있다면 우선적으로 보여줘야함.\n    const searchedLoc = newHospitals.filter((res)=>\n        res.location.includes(regionTwo)\n    );\n    \n    return (\n        <div className={styles.userLoc__container}>\n            {\n                loading ? ( <div className={styles.userLoc__loading}><Loading/></div> )\n                : (\n                    // 해당 결과가 여러개일 경우, 상단에 존재하는 5개의 결과물만 보여주도록 함.\n                    searchedLoc.map((item, index)=>{\n                        if(index < 5) {\n                            return (\n                                <>\n                                    <div className={styles.userLoc__content}>\n                                    <div className={styles.userLoc__number}>{index+1}</div>\n                                        <ul>\n                                            <li>\n                                                시설 이름 : {item.name}\n                                                <br/>\n                                                주소 : {item.location}\n                                                <br/>\n                                                전화번호 : {item.phonenumber}\n                                                <br/>\n                                                진료 과목 : {item.category}\n                                                <br/>\n                                                {/* postNo라는 id 개념의 속성을 통해 detail page를 만듬. */}\n                                                <Link to={`/detail/${item.id}`}\n                                                state={{item : item}}>자세히보기...</Link>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                </>\n                            )\n                        }\n                    })\n                )\n            }\n        </div>\n    )\n}\n\nexport default UserLocFacility;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}